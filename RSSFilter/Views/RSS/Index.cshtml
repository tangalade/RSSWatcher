@model RSSFilter.Common.ListViewModel<RSSFilter.Models.RSSItem>
@{
    ViewBag.Title = "RSS Items";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using RSSFilter.Models
@using RSSFilter.Common

<div class="content-wrapper" data-type="rss-items">
    <div class="main-title">
        <h2>RSS Feed Items</h2>
    </div>
    <div class="list-control-header">
        <div class="action-buttons">
            <button data-viewstatus="@ItemViewStatus.NEW" title="Mark New"><i class="material-icons">markunread</i></button>
            <button data-viewstatus="@ItemViewStatus.VIEWED" title="Mark Viewed"><i class="material-icons">mail_outline</i></button>
            <button data-viewstatus="@ItemViewStatus.ARCHIVED" title="Archive"><i class="material-icons">archive</i></button>
        </div>
        @Html.Partial("_FilterRemoveItems", Model.control.filters)
        @Html.Partial("_PageSize", Model.control.pager)
    </div>
    @{ string colName; }
    <table class="table table-bordered table-hover rss-item-table">
        <thead>
            <tr class="header-row">
                @{ colName = "Select"; }
                <th data-col="@colName">
                    @* FIXME: change to use google icons, upon clicking a row checkbox, change the header checkbox to the indeterminate_check_box icon *@
                    <input name="selected" value="true" type="checkbox" />
                </th>
                @{ colName = "RSSPublishDate"; }
                <th data-col="@colName">
                    <a href="@Url.Action("SortBy", "RSS",
                        new { prop = colName, ascending = (Model.control.sorter.Name.Equals(colName) ?
                        (Model.control.sorter.Ascending ? false : true) : true) })">
                        <span class="text">@Html.DisplayNameFor(m => m.items.ElementAt(0).RSSPublishDate)</span>
                        <span class="sort-icon">
                            @Html.Raw(Model.control.sorter.Name.Equals(colName) ? (Model.control.sorter.Ascending ? "&#x25b4" : "&#x25be") : "")
                        </span>
                    </a>
                </th>
                @{ colName = "ItemType"; }
                <th data-col="@colName">
                    <a href="@Url.Action("SortBy", "RSS",
                        new { prop = colName, ascending = (Model.control.sorter.Name.Equals(colName) ?
                        (Model.control.sorter.Ascending ? false : true) : true) })">
                        <span class="text">@Html.DisplayNameFor(m => m.items.ElementAt(0).ItemType.Name)</span>
                        <span class="sort-icon">
                            @Html.Raw(Model.control.sorter.Name.Equals(colName) ? (Model.control.sorter.Ascending ? "&#x25b4" : "&#x25be") : "")
                        </span>
                    </a>
                </th>
                @{ colName = "Artist"; }
                <th data-col="@colName">
                    <a href="@Url.Action("SortBy", "RSS",
                        new { prop = colName, ascending = (Model.control.sorter.Name.Equals(colName) ?
                        (Model.control.sorter.Ascending ? false : true) : true) })">
                        <span class="text">@Html.DisplayNameFor(m => m.items.ElementAt(0).Artist.Name)</span>
                        <span class="sort-icon">
                            @Html.Raw(Model.control.sorter.Name.Equals(colName) ? (Model.control.sorter.Ascending ? "&#x25b4" : "&#x25be") : "")
                        </span>
                    </a>
                </th>
                @{ colName = "Title"; }
                <th data-col="@colName">
                    <a href="@Url.Action("SortBy", "RSS",
                        new { prop = colName, ascending = (Model.control.sorter.Name.Equals(colName) ?
                        (Model.control.sorter.Ascending ? false : true) : true) })">
                        <span class="text">@Html.DisplayNameFor(m => m.items.ElementAt(0).Title)</span>
                        <span class="sort-icon">
                            @Html.Raw(Model.control.sorter.Name.Equals(colName) ? (Model.control.sorter.Ascending ? "&#x25b4" : "&#x25be") : "")
                        </span>
                    </a>
                </th>
                @{ colName = "Edit"; }
                <th data-col="@colName"></th>
                @{ colName = "Archive"; }
                <th data-col="@colName"></th>
            </tr>
        </thead>
        <tbody>
            @if (Model.items.Count() == 0)
            {
                <tr><td colspan="10">k2nblog.com has not yet given us any items.</td></tr>
            }
            @foreach (var item in Model.items)
            {
                <tr class="rss-item-row" data-viewstatus="@((item.ViewStatus == RSSFilter.Common.ItemViewStatus.NEW) ? "New" : "Viewed")">
                    @{ colName = "Select"; }
                    <td data-col="Select">
                        <input data-id="@item.Id" name="selected" value="true" type="checkbox" />
                    </td>
                    @{ colName = "RSSPublishDate"; }
                    <td class="url-hover" data-col="@colName">
                        <span class="content">
                            <a class="text" href="@Url.Action("FilterBy", "RSS", new { prop = colName, value = Html.DisplayFor(m => item.RSSPublishDate) })">
                                @Html.DisplayFor(m => item.RSSPublishDate)
                            </a>
                        </span>
                    </td>
                    @{ colName = "ItemType"; }
                    <td class="url-hover" data-col="@colName">
                        <span class="content">
                            <a class="text" href="@Url.Action("FilterBy", "RSS", new { prop = colName, value = Html.DisplayFor(m => item.ItemType.Name) })">
                                @Html.DisplayFor(m => item.ItemType.Name)
                            </a>
                        </span>
                        <span class="thumbs">
                            <a href="@Url.Action("RateItemType", "RSS", new { id = item.ItemType.Id, rating = ((item.ItemType.Rating == Rating.LIKE) ? Rating.UNRATED : Rating.LIKE)})">
                                <i data-active="@(item.ItemType.Rating == Rating.LIKE)" data-type="up" class="material-icons thumb">thumb_up</i>
                            </a>
                            <a href="@Url.Action("RateItemType", "RSS", new { id = item.ItemType.Id, rating = ((item.ItemType.Rating == Rating.DISLIKE) ? Rating.UNRATED: Rating.DISLIKE)})">
                                <i data-active="@(item.ItemType.Rating == Rating.DISLIKE)" data-type="down" class="material-icons thumb">thumb_down</i>
                            </a>
                        </span>
                    </td>
                    @{ colName = "Artist"; }
                    <td class="url-hover" data-col="@colName">
                        <span class="content">
                            <a class="text" href="@Url.Action("FilterBy", "RSS", new { prop = colName, value = Html.DisplayFor(m => item.Artist.Name) })">
                                @Html.DisplayFor(m => item.Artist.Name)
                            </a>
                        </span>
                        <span class="thumbs">
                            <a href="@Url.Action("RateArtist", "RSS", new { id = item.Artist.Id, rating = ((item.Artist.Rating == Rating.LIKE) ? Rating.UNRATED : Rating.LIKE)})">
                                <i data-active="@(item.Artist.Rating == Rating.LIKE)" data-type="up" class="material-icons thumb">thumb_up</i>
                            </a>
                            <a href="@Url.Action("RateArtist", "RSS", new { id = item.Artist.Id, rating = ((item.Artist.Rating == Rating.DISLIKE) ? Rating.UNRATED: Rating.DISLIKE)})">
                                <i data-active="@(item.Artist.Rating == Rating.DISLIKE)" data-type="down" class="material-icons thumb">thumb_down</i>
                            </a>
                        </span>
                    </td>
                    @{ colName = "Title"; }
                    <td class="url-hover" data-col="@colName">
                        <span class="content">
                            <a class="text" href="@Url.Action("ViewItem", "RSS", new { id = item.Id })" target="_blank">
                                @Html.DisplayFor(m => item.Title)
                            </a>
                        </span>
                    </td>
                    @{ colName = "Edit"; }
                    <td data-col="@colName">
                        <span>
                            <a class="text" href="@Url.Action("Edit", "RSS", new { id = item.Id })"><i class="material-icons">mode_edit</i></a>
                        </span>
                    </td>
                    @{ colName = "Archive"; }
                    <td data-col="@colName">
                        <span>
                            <a class="text" href="@Url.Action("Archive", "RSS", new { id = item.Id })"><i class="material-icons">archive</i></a>
                        </span>
                    </td>
                </tr>
                        }
        </tbody>
    </table>

    @Html.Partial("_PageControls", Model.control.pager)
</div>
    @Scripts.Render("~/Scripts/list-control.js")
    @Scripts.Render("~/Scripts/rss-item-list.js")
    <script>
        // rss-item-list.js defines
        markViewStatusURL = "@(Url.Action("MarkViewStatus", "RSS"))";

        // list-control.js defines
        controlSubmitURL = "@(Url.Action("Index","RSS"))";

        var rssTable = document.getElementsByClassName("rss-item-table")[0];
        var rssItemRows = rssTable.getElementsByClassName("rss-item-row");
        var rssHeader = rssTable.getElementsByClassName("header-row");
        var rssHeaderCells = rssHeader[0].getElementsByTagName("th");

        // Add action button click handlers
        var actionButtons = document.getElementsByClassName("action-buttons")[0].getElementsByTagName("button");
        for (var i = 0; i < actionButtons.length; i++) {
            actionButtons[i].addEventListener("click", clickActionButton);
        }

        // accumulate rssItemCheckboxes
        for (var i = 0; i < rssItemRows.length; i++) {
            var rssItemTds = rssItemRows[i].getElementsByTagName("td");
            for (var j = 0; j < rssItemTds.length; j++) {
                if (rssItemTds[j].dataset.col == "Select")
                    rssItemCheckboxes.push(rssItemTds[j].getElementsByTagName("input")[0]);
            }
        }

        for (var i = 0; i < rssHeaderCells.length; i++) {
            if (rssHeaderCells[i].dataset.col == "Select")
                rssHeaderCells[i].getElementsByTagName("input")[0].addEventListener("click", clickHeadSelect);
        }

    </script>
